---
apiVersion: v1
kind: Service
metadata:
  name: traefik
spec:
  ports:
    - protocol: TCP
      name: web
      port: 80
    - protocol: TCP
      name: websecure
      port: 4443
    - protocol: TCP
      name: admin
      port: 8080
  selector: # Select the pod container with app=treafik to communicate with CusrerIP inside the container
    app: traefik
---
kind: Deployment
apiVersion: apps/v1
metadata:
  namespace: default
  name: traefik
  #name: traefik-ingress-controller
  labels:
    app: traefik
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      name: traefik
      labels:
        app: traefik
    spec:
      hostNetwork: true # Using the host's network
      serviceAccountName: traefik-ingress-controller # Adjustment strategy
      terminationGracePeriodSeconds: 1
      containers:
        - name: traefik
          #name: traefik-ingress-lb
          image: traefik:v3.4
          args: # treafik does the domain certificate application here
            #- --configfile=/config/traefik.yaml
            - --api.insecure
            - --accesslog
            - --entrypoints.web.Address=:80
            - --entrypoints.websecure.Address=:4443
            - --providers.kubernetescrd
            - --certificatesresolvers.myresolver.acme.tlschallenge
            - --certificatesresolvers.myresolver.acme.email=foo@you.com
            - --certificatesresolvers.myresolver.acme.storage=acme.json
            # Please note that this is the staging Let's Encrypt server.
            # Once you get things working, you should remove that whole line altogether.
            - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
          ports: # Traefik/pod's 80 4443 8080 ports.
            - name: web
              containerPort: 80
              #hostPort: 80          # Bind the container port to port 80 of the server on which it resides
            - name: websecure
              containerPort: 4443
              #hostPort: 443        # Bind the container port to port 443 of the host server.
            - name: admin
              containerPort: 8080 # Traefik Dashboard
          resources:
            limits:
              cpu: 2000m
              memory: 1024Mi
            requests:
              cpu: 1000m
              memory: 1024Mi
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
          volumeMounts:
            - mountPath: "/config"
              name: "config"
          readinessProbe:
            httpGet:
              path: /ping
              port: 8080
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /ping
              port: 8080
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5  
      volumes:
        - name: config
          configMap:
            name: traefik-config 
      tolerations:              ## Set to tolerate all taints and prevent nodes from being set tainted
        - operator: "Exists"
      nodeSelector:             ## Set up node filters to start on nodes with specific labels
        IngressProxy: "true"
#      nodeName: k8s-n4 # Assigning the treafik load pod to k8s-n4
